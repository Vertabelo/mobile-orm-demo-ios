//
// AddressDAO.m
//
// DAO for Table address.
//
// Generated by Mobi-ORM on Mon Nov 02 16:21:35 CET 2015
//

#import "AddressDAO.h"
#import "Address.h"
#import "MOSQLiteManager.h"
#import "AddressRowHandler.h"
#import "MORowHandlerForNumber.h"
#import "MORowHandlerForObject.h"
#import "MORowHandlerForData.h"

@interface AddressDAO ()

@property MOSQLiteManager *manager;

@end

@implementation AddressDAO

+ (AddressDAO *)daoWithDataSource:(id <MOSQLiteDataSource>)dataSource {
    return [[AddressDAO alloc] initWithDataSource:dataSource];
}

- (id)initWithDataSource:(id <MOSQLiteDataSource>)dataSource {
    self = [super init];

    if (self) {
        self.manager = [[MOSQLiteManager alloc] initWithDataSource:dataSource];
        _TABLE_EXPRESSION = [[MOTableExpression alloc] initWithName:@"address"];
        _rowHandler = [[AddressRowHandler alloc] init];

        _ID = [MOColumn columnWithOwner:self.TABLE_EXPRESSION name:@"id" type:INT];
        [self.TABLE_EXPRESSION addAsPrimaryKeyColumn:self.ID];

        _CITY_ID = [MOColumn columnWithOwner:self.TABLE_EXPRESSION name:@"city_id" type:INT];
        [self.TABLE_EXPRESSION addColumn:self.CITY_ID];

        _ADDRESS = [MOColumn columnWithOwner:self.TABLE_EXPRESSION name:@"address" type:VARCHAR];
        [self.TABLE_EXPRESSION addColumn:self.ADDRESS];

    }
    return self;
}

- (NSArray *)select:(MOSelectQuery *)query {
    return [self.manager loadDataFromQuery:query withRowHandler:self.rowHandler];
}

- (NSArray *)select:(MOSelectQuery *)query withRowHandler:(id <MORowHandler>)rowHandler {
    return [self.manager loadDataFromQuery:query withRowHandler:rowHandler];
}

- (Address *)selectOne:(MOSelectQuery *)query {
    NSArray *result = [self select:query];

    if ([result count] == 1) {
        return result[0];
    } else if ([result count] > 1) {
        @throw [NSException exceptionWithName:@"MultipleRowsException" reason:@"Query returned more than one row" userInfo:nil];
    } else {
        return nil;
    }
}

- (Address *)getById:(NSNumber *)anId {
    NSMutableArray *conditions = [[NSMutableArray alloc] init];
    [conditions addObject:[self.ID isEqualToNumber:anId]];

    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = [MOLExp andArray:conditions];

    return [self selectOne:query];
}

- (Address *)getByPlace:(Place *)place {
    NSMutableArray *conditions = [[NSMutableArray alloc] init];
    [conditions addObject:[self.ID isEqualToNumber:place.columnAddressId]];
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = [MOLExp andArray:conditions];
    return [self selectOne:query];
}

- (NSArray *)getByCity:(City *)city {
    NSMutableArray *conditions = [[NSMutableArray alloc] init];
    [conditions addObject:[self.CITY_ID isEqualToNumber:city.columnId]];
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = [MOLExp andArray:conditions];
    return [self select:query];
}

- (NSArray *)getByCity:(City *)city orderAscendingBy:(MOAExp *)orderBy {
    NSMutableArray *conditions = [[NSMutableArray alloc] init];
    [conditions addObject:[self.CITY_ID isEqualToNumber:city.columnId]];
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = [MOLExp andArray:conditions];
    query.orderBy = @[[MOOrderBy orderAscByColumn:orderBy]];
    return [self select:query];
}

- (NSArray *)getByCity:(City *)city orderDescendingBy:(MOAExp *)orderBy {
    NSMutableArray *conditions = [[NSMutableArray alloc] init];
    [conditions addObject:[self.CITY_ID isEqualToNumber:city.columnId]];
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = [MOLExp andArray:conditions];
    query.orderBy = @[[MOOrderBy orderDescByColumn:orderBy]];
    return [self select:query];
}

- (NSArray *)getAddressArray {
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    return [self select:query];
}

- (NSArray *)getAddressArrayOrderAscByColumn:(MOAExp *)orderBy {
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.orderBy = @[[MOOrderBy orderAscByColumn:orderBy]];
    return [self select:query];
}

- (NSArray *)getAddressArrayOrderDescByColumn:(MOAExp *)orderBy {
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.orderBy = @[[MOOrderBy orderDescByColumn:orderBy]];
    return [self select:query];
}

- (NSArray *)getAddressArrayWhere:(MOLExp *)where {
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = where;
    return [self select:query];
}

- (NSArray *)getAddressArrayWhere:(MOLExp *)where orderAscByColumn:(MOAExp *)orderBy {
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = where;
    query.orderBy = @[[MOOrderBy orderAscByColumn:orderBy]];
    return [self select:query];
}

- (NSArray *)getAddressArrayWhere:(MOLExp *)where orderDescByColumn:(MOAExp *)orderBy {
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = where;
    query.orderBy = @[[MOOrderBy orderDescByColumn:orderBy]];
    return [self select:query];
}

- (NSUInteger)getCount {
    MOSelectQuery *query = [MOSelectQuery selectColumn:[MOAExp funWithName:@"COUNT" forArgument:[MOColumn asterisk]] fromTable:self.TABLE_EXPRESSION];
    return (NSUInteger)[[self select:query withRowHandler:[[MORowHandlerForNumber alloc] init]][0] integerValue];
}

- (NSUInteger)getCountWhere:(MOLExp *)where {
    MOSelectQuery *query = [MOSelectQuery selectColumn:[MOAExp funWithName:@"COUNT" forArgument:[MOColumn asterisk]] fromTable:self.TABLE_EXPRESSION];
    query.where = where;
    return (NSUInteger)[[self select:query withRowHandler:[[MORowHandlerForNumber alloc] init]][0] integerValue];
}

- (id)invokeFunction:(NSString *)name withArgument:(MOAExp *)arg {
    MOSelectQuery *query = [MOSelectQuery selectColumn:[MOAExp funWithName:name forArgument:arg] fromTable:self.TABLE_EXPRESSION];
    return [self select:query withRowHandler:[[MORowHandlerForObject alloc] init]][0];
}

- (id)invokeFunction:(NSString *)name withArgument:(MOAExp *)arg where:(MOLExp *)where {
    MOSelectQuery *query = [MOSelectQuery selectColumn:[MOAExp funWithName:name forArgument:arg] fromTable:self.TABLE_EXPRESSION];
    query.where = where;
    return [self select:query withRowHandler:[[MORowHandlerForObject alloc] init]][0];
}

- (id)invokeForAllFunction:(NSString *)name {
    MOSelectQuery *query = [MOSelectQuery selectColumn:[MOAExp funWithName:name forArgument:[MOColumn asterisk]] fromTable:self.TABLE_EXPRESSION];
    return [self select:query withRowHandler:[[MORowHandlerForObject alloc] init]][0];
}

- (void)insert:(MOInsertStatement *)query {
    [self.manager executeQuery:query];
}

- (void)insertAddress:(Address *)address {
    MOInsertStatement *query = [[MOInsertStatement alloc] initWithTableExpression:self.TABLE_EXPRESSION];

    [query addColumn:self.ID withValue:address.columnId];
    [query addColumn:self.CITY_ID withValue:address.columnCityId];
    [query addColumn:self.ADDRESS withValue:address.columnAddress];

    NSNumber *num = [self.manager executeInsertStatement:query];
    if (num) {
        address.columnId = num;
    }
}

- (void)insertAddressArray:(NSArray *)array {
    for (Address *address in array) {
        [self insertAddress:address];
    }
}

- (void)update:(MOUpdateStatement *)query {
    [self.manager executeQuery:query];
}

- (void)updateAddress:(Address *)address {
    MOUpdateStatement *query = [[MOUpdateStatement alloc] initWithTableExpression:self.TABLE_EXPRESSION];

    [query updateColumn:self.ID withValue:address.columnId];
    [query updateColumn:self.CITY_ID withValue:address.columnCityId];
    [query updateColumn:self.ADDRESS withValue:address.columnAddress];

    NSMutableArray *pk = [[NSMutableArray alloc] init];
    [pk addObject:[self.ID isEqualToNumber:address.columnId]];

    query.where = [MOLExp andArray:pk];
    [self.manager executeQuery:query];
}

- (void)updateAddressArray:(NSArray *)array {
    for (Address *address in array) {
        [self updateAddress:address];
    }
}

- (void)delete:(MODeleteStatement *)query {
    [self.manager executeQuery:query];
}

- (void)deleteAddress:(Address *)address {
    MODeleteStatement *query = [[MODeleteStatement alloc] initWithTableExpression:self.TABLE_EXPRESSION];

    NSMutableArray *pk = [[NSMutableArray alloc] init];
    [pk addObject:[self.ID isEqualToNumber:address.columnId]];

    query.where = [MOLExp andArray:pk];
    [self.manager executeQuery:query];
}

- (void)deleteAddressArray:(NSArray *)array {
    for (Address *address in array) {
        [self deleteAddress:address];
    }
}

- (void)deleteById:(NSNumber *)anId {
    NSMutableArray *pk = [[NSMutableArray alloc] init];
    [pk addObject:[self.ID isEqualToNumber:anId]];

    MODeleteStatement *query = [[MODeleteStatement alloc] initWithTableExpression:self.TABLE_EXPRESSION];
    query.where = [MOLExp andArray:pk];

    [self.manager executeQuery:query];
}

- (void)deleteWhere:(MOLExp *)where {
    MODeleteStatement *query = [[MODeleteStatement alloc] initWithTableExpression:self.TABLE_EXPRESSION];
    query.where = where;
    [self.manager executeQuery:query];
}

- (BOOL)isEqualByPK:(Address *)address1 and:(Address *)address2 {
    BOOL result = YES;
    result = result && ((!address1.columnId && !address2.columnId) || [address1.columnId isEqualToNumber:address2.columnId]);

    return result;
}

@end

