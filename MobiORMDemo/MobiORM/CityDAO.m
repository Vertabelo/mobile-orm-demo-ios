//
// CityDAO.m
//
// DAO for Table city.
//
// Generated by Mobi-ORM on Mon Nov 02 16:21:35 CET 2015
//

#import "CityDAO.h"
#import "City.h"
#import "MOSQLiteManager.h"
#import "CityRowHandler.h"
#import "MORowHandlerForNumber.h"
#import "MORowHandlerForObject.h"
#import "MORowHandlerForData.h"

@interface CityDAO ()

@property MOSQLiteManager *manager;

@end

@implementation CityDAO

+ (CityDAO *)daoWithDataSource:(id <MOSQLiteDataSource>)dataSource {
    return [[CityDAO alloc] initWithDataSource:dataSource];
}

- (id)initWithDataSource:(id <MOSQLiteDataSource>)dataSource {
    self = [super init];

    if (self) {
        self.manager = [[MOSQLiteManager alloc] initWithDataSource:dataSource];
        _TABLE_EXPRESSION = [[MOTableExpression alloc] initWithName:@"city"];
        _rowHandler = [[CityRowHandler alloc] init];

        _ID = [MOColumn columnWithOwner:self.TABLE_EXPRESSION name:@"id" type:INT];
        [self.TABLE_EXPRESSION addAsPrimaryKeyColumn:self.ID];

        _COUNTRY_ID = [MOColumn columnWithOwner:self.TABLE_EXPRESSION name:@"country_id" type:INT];
        [self.TABLE_EXPRESSION addColumn:self.COUNTRY_ID];

        _NAME = [MOColumn columnWithOwner:self.TABLE_EXPRESSION name:@"name" type:VARCHAR];
        [self.TABLE_EXPRESSION addColumn:self.NAME];

    }
    return self;
}

- (NSArray *)select:(MOSelectQuery *)query {
    return [self.manager loadDataFromQuery:query withRowHandler:self.rowHandler];
}

- (NSArray *)select:(MOSelectQuery *)query withRowHandler:(id <MORowHandler>)rowHandler {
    return [self.manager loadDataFromQuery:query withRowHandler:rowHandler];
}

- (City *)selectOne:(MOSelectQuery *)query {
    NSArray *result = [self select:query];

    if ([result count] == 1) {
        return result[0];
    } else if ([result count] > 1) {
        @throw [NSException exceptionWithName:@"MultipleRowsException" reason:@"Query returned more than one row" userInfo:nil];
    } else {
        return nil;
    }
}

- (City *)getById:(NSNumber *)anId {
    NSMutableArray *conditions = [[NSMutableArray alloc] init];
    [conditions addObject:[self.ID isEqualToNumber:anId]];

    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = [MOLExp andArray:conditions];

    return [self selectOne:query];
}

- (City *)getByCountryId:(NSNumber *)aCountryId name:(NSString *)aName {
    NSMutableArray *conditions = [[NSMutableArray alloc] init];
    [conditions addObject:[self.COUNTRY_ID isEqualToNumber:aCountryId]];
    [conditions addObject:[self.NAME isEqualToString:aName]];

    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = [MOLExp andArray:conditions];

    return [self selectOne:query];
}

- (NSArray *)getByCountry:(Country *)country {
    NSMutableArray *conditions = [[NSMutableArray alloc] init];
    [conditions addObject:[self.COUNTRY_ID isEqualToNumber:country.columnId]];
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = [MOLExp andArray:conditions];
    return [self select:query];
}

- (NSArray *)getByCountry:(Country *)country orderAscendingBy:(MOAExp *)orderBy {
    NSMutableArray *conditions = [[NSMutableArray alloc] init];
    [conditions addObject:[self.COUNTRY_ID isEqualToNumber:country.columnId]];
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = [MOLExp andArray:conditions];
    query.orderBy = @[[MOOrderBy orderAscByColumn:orderBy]];
    return [self select:query];
}

- (NSArray *)getByCountry:(Country *)country orderDescendingBy:(MOAExp *)orderBy {
    NSMutableArray *conditions = [[NSMutableArray alloc] init];
    [conditions addObject:[self.COUNTRY_ID isEqualToNumber:country.columnId]];
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = [MOLExp andArray:conditions];
    query.orderBy = @[[MOOrderBy orderDescByColumn:orderBy]];
    return [self select:query];
}

- (City *)getByAddress:(Address *)address {
    NSMutableArray *conditions = [[NSMutableArray alloc] init];
    [conditions addObject:[self.ID isEqualToNumber:address.columnCityId]];
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = [MOLExp andArray:conditions];
    return [self selectOne:query];
}

- (NSArray *)getCityArray {
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    return [self select:query];
}

- (NSArray *)getCityArrayOrderAscByColumn:(MOAExp *)orderBy {
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.orderBy = @[[MOOrderBy orderAscByColumn:orderBy]];
    return [self select:query];
}

- (NSArray *)getCityArrayOrderDescByColumn:(MOAExp *)orderBy {
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.orderBy = @[[MOOrderBy orderDescByColumn:orderBy]];
    return [self select:query];
}

- (NSArray *)getCityArrayWhere:(MOLExp *)where {
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = where;
    return [self select:query];
}

- (NSArray *)getCityArrayWhere:(MOLExp *)where orderAscByColumn:(MOAExp *)orderBy {
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = where;
    query.orderBy = @[[MOOrderBy orderAscByColumn:orderBy]];
    return [self select:query];
}

- (NSArray *)getCityArrayWhere:(MOLExp *)where orderDescByColumn:(MOAExp *)orderBy {
    MOSelectQuery *query = [MOSelectQuery selectFromTable:self.TABLE_EXPRESSION];
    query.where = where;
    query.orderBy = @[[MOOrderBy orderDescByColumn:orderBy]];
    return [self select:query];
}

- (NSUInteger)getCount {
    MOSelectQuery *query = [MOSelectQuery selectColumn:[MOAExp funWithName:@"COUNT" forArgument:[MOColumn asterisk]] fromTable:self.TABLE_EXPRESSION];
    return (NSUInteger)[[self select:query withRowHandler:[[MORowHandlerForNumber alloc] init]][0] integerValue];
}

- (NSUInteger)getCountWhere:(MOLExp *)where {
    MOSelectQuery *query = [MOSelectQuery selectColumn:[MOAExp funWithName:@"COUNT" forArgument:[MOColumn asterisk]] fromTable:self.TABLE_EXPRESSION];
    query.where = where;
    return (NSUInteger)[[self select:query withRowHandler:[[MORowHandlerForNumber alloc] init]][0] integerValue];
}

- (id)invokeFunction:(NSString *)name withArgument:(MOAExp *)arg {
    MOSelectQuery *query = [MOSelectQuery selectColumn:[MOAExp funWithName:name forArgument:arg] fromTable:self.TABLE_EXPRESSION];
    return [self select:query withRowHandler:[[MORowHandlerForObject alloc] init]][0];
}

- (id)invokeFunction:(NSString *)name withArgument:(MOAExp *)arg where:(MOLExp *)where {
    MOSelectQuery *query = [MOSelectQuery selectColumn:[MOAExp funWithName:name forArgument:arg] fromTable:self.TABLE_EXPRESSION];
    query.where = where;
    return [self select:query withRowHandler:[[MORowHandlerForObject alloc] init]][0];
}

- (id)invokeForAllFunction:(NSString *)name {
    MOSelectQuery *query = [MOSelectQuery selectColumn:[MOAExp funWithName:name forArgument:[MOColumn asterisk]] fromTable:self.TABLE_EXPRESSION];
    return [self select:query withRowHandler:[[MORowHandlerForObject alloc] init]][0];
}

- (void)insert:(MOInsertStatement *)query {
    [self.manager executeQuery:query];
}

- (void)insertCity:(City *)city {
    MOInsertStatement *query = [[MOInsertStatement alloc] initWithTableExpression:self.TABLE_EXPRESSION];

    [query addColumn:self.ID withValue:city.columnId];
    [query addColumn:self.COUNTRY_ID withValue:city.columnCountryId];
    [query addColumn:self.NAME withValue:city.columnName];

    NSNumber *num = [self.manager executeInsertStatement:query];
    if (num) {
        city.columnId = num;
    }
}

- (void)insertCityArray:(NSArray *)array {
    for (City *city in array) {
        [self insertCity:city];
    }
}

- (void)update:(MOUpdateStatement *)query {
    [self.manager executeQuery:query];
}

- (void)updateCity:(City *)city {
    MOUpdateStatement *query = [[MOUpdateStatement alloc] initWithTableExpression:self.TABLE_EXPRESSION];

    [query updateColumn:self.ID withValue:city.columnId];
    [query updateColumn:self.COUNTRY_ID withValue:city.columnCountryId];
    [query updateColumn:self.NAME withValue:city.columnName];

    NSMutableArray *pk = [[NSMutableArray alloc] init];
    [pk addObject:[self.ID isEqualToNumber:city.columnId]];

    query.where = [MOLExp andArray:pk];
    [self.manager executeQuery:query];
}

- (void)updateCityArray:(NSArray *)array {
    for (City *city in array) {
        [self updateCity:city];
    }
}

- (void)delete:(MODeleteStatement *)query {
    [self.manager executeQuery:query];
}

- (void)deleteCity:(City *)city {
    MODeleteStatement *query = [[MODeleteStatement alloc] initWithTableExpression:self.TABLE_EXPRESSION];

    NSMutableArray *pk = [[NSMutableArray alloc] init];
    [pk addObject:[self.ID isEqualToNumber:city.columnId]];

    query.where = [MOLExp andArray:pk];
    [self.manager executeQuery:query];
}

- (void)deleteCityArray:(NSArray *)array {
    for (City *city in array) {
        [self deleteCity:city];
    }
}

- (void)deleteById:(NSNumber *)anId {
    NSMutableArray *pk = [[NSMutableArray alloc] init];
    [pk addObject:[self.ID isEqualToNumber:anId]];

    MODeleteStatement *query = [[MODeleteStatement alloc] initWithTableExpression:self.TABLE_EXPRESSION];
    query.where = [MOLExp andArray:pk];

    [self.manager executeQuery:query];
}

- (void)deleteWhere:(MOLExp *)where {
    MODeleteStatement *query = [[MODeleteStatement alloc] initWithTableExpression:self.TABLE_EXPRESSION];
    query.where = where;
    [self.manager executeQuery:query];
}

- (BOOL)isEqualByPK:(City *)city1 and:(City *)city2 {
    BOOL result = YES;
    result = result && ((!city1.columnId && !city2.columnId) || [city1.columnId isEqualToNumber:city2.columnId]);

    return result;
}

@end

